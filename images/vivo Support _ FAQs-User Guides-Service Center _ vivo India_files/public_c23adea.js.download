var ajaxUrl = {
  search: globalVar.path + '/' + globalVar.regionId + '/searchData/ajaxSearch', // 全局搜索
  productsBanner: globalVar.path + '/' + globalVar.regionId + '/product/productBannerFilter', // 产品首页 产品banner
  productsList: globalVar.path + '/' + globalVar.regionId + '/product/productFilter', // 产品首页 产品列表
  proCompare: globalVar.path + '/' + globalVar.regionId + '/product/productCompareById', // 产品对比页
  sendUserPosition: globalVar.path + '/' + globalVar.regionId + '/retailers/queryInfoByLatitudeAndLongitude', // retailers 专卖店 发送用户坐标，获取店铺信息，远近排序
  chooseArea: globalVar.path + '/' + globalVar.regionId + '/retailers/queryByCondition', // retailers 专卖店 选择地区，获取店铺信息
  sendUserPositionCenter: globalVar.path + '/' + globalVar.regionId + '/support/queryServiceCenterInfoByLatitudeAndLongitude', // service center 服务（维修）中心 发送用户坐标，获取店铺信息，远近排序
  chooseAreaCenter: globalVar.path + '/' + globalVar.regionId + '/support/queryServiceCenterByCondition', // service center 服务（维修）中心 选择地区，获取店铺信息
  FAQDetail: globalVar.path + '/' + globalVar.regionId + '/support/questionById', // FAQ 获取内容
  FAQHandle: globalVar.path + '/' + globalVar.regionId + '/support/insertOrUpdateServiceEvaluate', // FAQ 执行点赞/踩
  searchJobs: globalVar.path + '/' + globalVar.regionId + '/aboutVivo/queryPostManagementByCondition', // 职位搜索
  searchIMEI: globalVar.path + '/' + globalVar.regionId + '/support/checkCode', // IMEI码查询
  searchRepeatIMEI: globalVar.path + '/' + globalVar.regionId + '/support/repeatIMEI/checkCode', // 重复IMEI码查询
  searchMaint: globalVar.path + '/' + globalVar.regionId + '/support/queryPriceByProductId', // 零配件查询
  recordDownFuntouch: globalVar.path + '/' + globalVar.regionId + '/support/updateDownloadFrequencyById', // 系统升级 记录 Funtouch OS 下载次数
  searchProduct: globalVar.path + '/' + globalVar.regionId + '/support/queryProductInfosByClassifyId', // 获取某一系列下所以机型
  searchWord: globalVar.path + '/' + globalVar.regionId + '/support/questionByTitleRT', // support 页面实时搜索
  bookOnlineSave: globalVar.path + '/' + globalVar.regionId + '/bookOnline/save', // book Online 页面数据提交
  openResourcePackageIndex: globalVar.path + '/' + globalVar.regionId + '/vpg/open/resource/index',
  openResourcePackageUpload: globalVar.path + '/' + globalVar.regionId + '/vpg/open/resource/upload',
  openResourcePackageReupload: globalVar.path + '/' + globalVar.regionId + '/vpg/open/resource/reupload',
  openResourcePackageRemark: globalVar.path + '/' + globalVar.regionId + '/vpg/open/resource/remark',
  openResourcePackageConfirm: globalVar.path + '/' + globalVar.regionId + '/vpg/open/resource/confirm',
  getSerialNumber: globalVar.path + '/' + globalVar.regionId + '/vpg/api/sendRevised/getSerialCode', // 获取oa和流水号
  safeNoticePage: globalVar.path + '/' + globalVar.regionId + '/support/safeNoticePage', // 安全通告列表页分页
  recordCookieOperation: globalVar.path + '/' + globalVar.regionId + '/vpg/api/oneTrust/recordCookieOperation', // Onetrust操作记录
  setCsrfToken: globalVar.path + '/' + globalVar.regionId + '/vpg/api/tool/cookie', // 生成Csrf Token
  savePrivacySupport: globalVar.path + '/' + globalVar.regionId + '/privacySupport/savePrivacySupport', // 隐私支持提交
  docPageChange: globalVar.path + '/global/doc/download', // DOC列表切换
  aboutVivoCulture: globalVar.path + '/' + globalVar.regionId + '/aboutVivo/enterpriseHistory', // 关于 vivo 页面企业历程
  sendToCeo: globalVar.path + '/' + globalVar.regionId + '/email/sendToCeo', // 写信给CEO
  sendEmailSupport: globalVar.path + '/' + globalVar.regionId + '/emailSupport/send', // 提交邮箱
  checkServiceRepairEngineer: globalVar.path + '/' + globalVar.regionId + '/service/repair/engineer/check', // 欧洲工程师专业维修手册下载前验证接口
  getEmailCode: globalVar.path + '/' + globalVar.regionId + '/email/support/verify' // 获取邮箱验证码接口（通用）
}

/**
 * 禁止页面滚动
 */
globalAPI.noScroll = function () {
  $('body,html').addClass('public_noscroll')
}
globalAPI.forbiddenScroll = function () {
  $('body,html').addClass('public_noscroll_new')
}
globalAPI.scroll = function () {
  $('body,html').addClass('public_scroll')
}
/**
 * 恢复页面滚动
 */
globalAPI.allowScroll = function () {
  $('body,html').removeClass('public_noscroll')
  $('body,html').removeClass('public_noscroll_new')
}
globalAPI.allScroll = function () {
  $('body,html').removeClass('public_scroll')
}

/**
 * 判断当前是否是手机浏览器
 */
globalAPI.isMobileBrowser = function () {
  var mobileAgent = new Array('iphone', 'ipod', 'ipad', 'android', 'mobile', 'blackberry', 'webos', 'incognito', 'webmate', 'bada', 'nokia', 'lg', 'ucweb', 'skyfire')
  var browser = navigator.userAgent.toLowerCase()
  for (var i = 0; i < mobileAgent.length; i++) {
    if (browser.indexOf(mobileAgent[i]) !== -1) {
      return true
    }
  }
  return false
}

/**
 * 判断当前是否是IE浏览器
 */
globalAPI.IEVersion = function () {
  var userAgent = navigator.userAgent // 取得浏览器的userAgent字符串
  var isIE = userAgent.indexOf('compatible') > -1 && userAgent.indexOf('MSIE') > -1 // 判断是否IE<11浏览器
  var isEdge = userAgent.indexOf('Edge') > -1 && !isIE // 判断是否IE的Edge浏览器
  var isIE11 = userAgent.indexOf('Trident') > -1 && userAgent.indexOf('rv:11.0') > -1
  if (isIE) {
    var reIE = new RegExp('MSIE (\\d+\\.\\d+);')
    reIE.test(userAgent)
    var fIEVersion = parseFloat(RegExp['$1'])
    if (fIEVersion === 7) {
      return 7
    } else if (fIEVersion === 8) {
      return 8
    } else if (fIEVersion === 9) {
      return 9
    } else if (fIEVersion === 10) {
      return 10
    } else {
      return 6 // IE版本<=7
    }
  } else if (isEdge) {
    return 'edge' // edge
  } else if (isIE11) {
    return 11 // IE11
  } else {
    return -1 // 不是ie浏览器
  }
}

/**
 * 判断当前屏幕宽度
 */
globalAPI.getMobileWidth = function () {
  if (window.innerWidth <= 768) {
    return 'wap'
  } else if (window.innerWidth < 1217) {
    return 'iPad'
  }
  return 'pc'
}

// 判断当前屏幕宽度是否是移动端 分辨率小于等于 768px true为是手机分辨率
globalAPI.judegMobileWidth = function () {
  if (window.innerWidth <= 768) {
    return true
  }
  return false
}

/**
 * 获取url参数
 */
globalAPI.getUrlParam = function () {
  var url = location.search // 获取url中'?'符后的字串
  var theRequest = {}
  if (url.indexOf('?') !== -1) {
    var str = url.substr(1) // 获取'?'后面的字符串
    var strs = str.split('&')
    for (var i = 0; i < strs.length; i++) {
      var arr = strs[i].split('=')
      theRequest[arr[0]] = (arr[1])
    }
  }
  return theRequest
}

/**
 * 从多语言文案中获取参数
 */
globalAPI.getSplitDoc = function (data) {
  var rgx = /\{[\d\w\s-]*\}/
  var res = data.split(rgx)
  if (res.length > 1) return res
  return null
}

/**
 * 向url中添加参数 返回添加完参数的url
 */
globalAPI.addURLParam = function (url, key, value) {
  var tUrl = '' // 最终的url
  var str = key + '=' + value // 向url尾部添加的字符串
  // 判断url有没有 ?
  if (url.indexOf('?') > -1) {
    // 判断?后面有没有参数
    if (url[url.length - 1] === '?') { // 没有参数
      tUrl = url + str
    } else { // 有参数
      tUrl = url + '&' + str
    }
  } else {
    tUrl = url + '?' + str
  }
  return tUrl
}

/**
 * 数据加密处理
 */
/*globalAPI.getEncryptedProcessingData = function (value) {
  var encrypt = new JSEncrypt()
  encrypt.setPublicKey(globalVar.publicKey)
  return encrypt.encryptLong(value)
}*/

/**
 * APP cookie协议弹窗
 */
globalAPI.appCookiePolicyWindow = function (callback) {
  var flag
  var cookieLastVersion = parseInt(globalVar.cookieLastVersion)
  if (globalVar.cookieStatus !== 1) {
    flag = false
  } else if (globalVar.cookieStatusVer !== cookieLastVersion) {
    flag = true
  }

  if (typeof flag === 'undefined') {
    callback && callback()
  } else {
    window.VivoWebSite.showGdprStatementCookieDialog(cookieLastVersion, flag)
  }
}

/**
 * 视频监听 埋点
 */
globalAPI.pageVideoBuryingPoint = function (params) {
  if (!params.dom) {
    return false
  }
  var $video = params.dom
  var videoURL = $video.find('source').attr('src')
  var videoState = ''
  $video.on('play', function () {
    params.playCallback && params.playCallback(videoState)
    globalAPI.gaPushFun({
      'event': 'video',
      'videoStep': 'play',
      'videoURL': videoURL
    })
    videoState = 'play'
  })
  $video.on('pause', function () {
    globalAPI.gaPushFun({
      'event': 'video',
      'videoStep': 'pause',
      'videoURL': videoURL
    })
  })
  $video.on('timeupdate', function () {
    var state = $video[0].currentTime / $video[0].duration
    if (state > 0.245 && state < 0.255) {
      globalAPI.gaPushFun({
        'event': 'video',
        'videoStep': '25%',
        'videoURL': videoURL
      })
    } else if (state > 0.495 && state < 0.505) {
      globalAPI.gaPushFun({
        'event': 'video',
        'videoStep': '50%',
        'videoURL': videoURL
      })
    } else if (state === 1) {
      globalAPI.gaPushFun({
        'event': 'video',
        'videoStep': '100%',
        'videoURL': videoURL
      })
    }
  })
}

/**
 * 带按钮的提示窗口
 */
globalAPI.confirm = function (obj) {
  globalAPI.confirm.count = (globalAPI.confirm.count || 0) + 1
  var dialogId = 'commonConfirm' + globalAPI.confirm.count
  var contentId = 'commonConfirmContent' + globalAPI.confirm.count
  var closeDom = obj.closeText ? '<div class="common_confirm-btn common_confirm-btn_close no-flip-over" role="button" tabindex="0">' + obj.closeText + '</div>' : ''
  var okDom = obj.okText ? '<div class="common_confirm-btn common_confirm-btn_ok no-flip-over" role="button" tabindex="0">' + obj.okText + '</div>' : ''
  var contentHtml = obj.contentHtml ? '<div id="'+ contentId +'" class="common_confirm-content">'+ obj.contentHtml +'</div>' : '<h1 id="'+ contentId +'" class="no-flip-over">' + obj.content + '</h1>'
  var dom = '<div class="public common_confirm-shade ani-fadeIn' + ((globalVar.layoutShow && globalVar.layoutShow === '1' ? ' text-dir-rtl' : '')) + '">' +
    '   <div id="'+ dialogId +'" class="common_confirm ani-slideDown" role="dialog" aria-modal="true" aria-labelledby="'+ contentId +'">' + contentHtml +
    '       <div class="common_confirm-btn-box">' + closeDom + okDom + '</div>' +
    '   </div>' +
    '</div>'
  $('body').append(dom)
  var close = function () {
    $('.common_confirm-shade').removeClass('ani-fadeIn').addClass('ani-fadeOut').find('.common_confirm').removeClass('ani-slideDown').addClass('ani-slideUp')
    var timer = setTimeout(function () {
      $('.common_confirm-shade').remove()
      clearTimeout(timer)
    }, 500)
    globalAPI.Dialog && globalAPI.Dialog.CloseDialog('.common_confirm-btn')
  }
  $('.common_confirm-btn_close').on('click', function () {
    obj.closeFun && obj.closeFun()
    close()
  })
  $('.common_confirm-btn_ok').on('click', function () {
    obj.okFunfunction && obj.okFunfunction()
    close()
  })
  globalAPI.Dialog && globalAPI.Dialog.OpenDialog({
    dialogSelector: '#' + dialogId,
    focusAfterOpened: obj.focusAfterOpened,
    focusAfterClosed: obj.focusAfterClosed
  })
}

/**
 * toast
 */
globalAPI.toast = function (context) {
  var dom = '<div role="alert" class="public common-toast' + ((globalVar.layoutShow && globalVar.layoutShow === '1' ? ' text-dir-rtl' : '')) + '">' +
      '<p>' + context + '</p>' +
    '</div>'
  if(document.querySelector('.common-toast')) return
  $('body').append(dom)
}
// 模拟 toast 动画结束后移除元素
document.body.addEventListener('animationend', function (event) {
  // 判断触发事件的元素是否为目标元素
  if (event.target.classList.contains('common-toast') && event.animationName === 'fade-out') {
    document.querySelector('.common-toast').remove()
  }
})
/**
 * 处理富文本内容
 */
globalAPI.handleRichText = function (className) {
  var jqDom = $(className)
  // 去除span的字体大小 font-size 和字体 font-family
  jqDom.find('*').each(function () {
    if (this.tagName === 'SPAN') {
      var style = $(this).attr('style')
      if (typeof style !== 'undefined') {
        style = style.split(';')
        for (var i = 0; i < style.length; i++) {
          if (style[i].indexOf('font-size') !== -1 || style[i].indexOf('font-family') !== -1) {
            style.splice(i, 1)
            i--
          }
        }
        style = style.join(';')
        $(this).attr('style', style)
      }
    } else { // 删除除了span标签的style属性
      // $(this).removeAttr('style')
    }
  })
  // 判断图片是图标（和文字一行）还是大图（单独一行）
  jqDom.find('img').removeAttr('width height').each(function () {
    var text = $(this).parents('p').text()
    if (text) { // 有文本
      $(this).addClass('small-pic')
    } else { // 没有文本
      $(this).addClass('big-pic')
    }
  })
  // 处理视频
  jqDom.find('video').attr('controls', 'controls')
  jqDom.find('video').removeAttr('preload width height')

  // 删除特定内容（不需要展示）
  jqDom.find("*:contains('###Internal content###')").each(function () {
    $(this).closest('p').remove()
  })
  return jqDom.prop('outerHTML') // 返回处理完毕的html代码
}

/**
 * @method getFormatPriceNumber
 * @param {number|String} number 待转化数字
 * @param {String} sep 千分位分隔符
 * @param {String} decimal 小数点分隔符
 * @param {String} currency 货币符号
 * @param {String} currencyPosition 货币符号位置，'1'为前置，'0'为后置
 * @return {String} 转化后的数字字符串
 */
globalAPI.getFormatPriceNumber = function (number, params) {
  if (!params) {
    return number
  }
  params.sep = (params.sep || '').replace(/&nbsp;/g, ' ')
  params.decimal = (params.decimal || '.').replace(/&nbsp;/g, ' ')
  params.currency = (params.currency || '').replace(/&nbsp;/g, ' ')
  params.currencyPosition = params.currencyPosition || '1'
  var numberList = number.toString().split('.')
  var priceNumber = numberList[0].replace(/\B(?=(\d{3})+(?!\d))/g, params.sep) + (numberList[1] ? params.decimal + numberList[1] : '')
  if (params.currencyPosition === '0') {
    return priceNumber + params.currency
  } else {
    return params.currency + priceNumber
  }
}

;(function () {
  var level = {
    init: function () {
      if (globalVar.appHeaderFooterRemoved && globalVar.appHeaderFooterRemoved === '1') {
        return false
      }
      this.notificationInit()
      this.popInit()
    },
    notificationInit: function () {
      var that = this
      if (globalVar.noticeBoard.isShow === '0' || globalAPI.getCookie( globalVar.brandMark + '_notification_bar_reminder')) {
        return
      }
      if ($('.common-notification-bar').length === 0) {
        var headerDom = document.querySelector('.vep-new-header') || document.querySelector('.veu-header') || document.querySelector('#header')
        $(headerDom).prepend(this.createNotificationDom())
      }
      $('body').addClass('epidemic-situation')
      globalAPI.refreshBodyStyleByHeader && globalAPI.refreshBodyStyleByHeader()
      that.notificationBarReminderClose()
    },
    createNotificationDom: function () {
      return '<div class="public common-notification-bar common-header-suspended' + (globalVar.layoutShow && globalVar.layoutShow === '1' ? ' text-dir-rtl' : '') + '">' +
        '<div class="notification-bar">' +
        '<p class="notification-bar-text no-flip-over"><span>' + globalVar.noticeBoard.noticeTitle + '</span>' + (globalVar.noticeBoard.isJump === '1' ? '<a href="' + globalVar.noticeBoard.linkUrl + '">' + globalVar.noticeBoard.linkContent + '</a>' : '') + '</p>' +
        '<i class="notification-bar-close" role="button" aria-label="close" tabindex="0"></i>' +
        '</div>' +
        '</div>'
    },
    notificationSetBodyStyle: function (height) {
      if ($('body').hasClass('ver-header-fixed')) {
        $('body').css('margin-top', (height ? height + 'px' : ''))
      }
      if ($('body').hasClass('ver-header-transparent')) {
        $('body').css('padding-top', (height ? height + 'px' : ''))
      }
    },
    notificationBarReminderClose: function () {
      var that = this
      $('.common-notification-bar').find('.notification-bar-close').on('click', function () {
        globalAPI.setCookie({
          key: globalVar.brandMark + '_notification_bar_reminder',
          value: '1',
          expire: 3 * 365 * 24,
          domain: '.' + globalVar.brandMark + '.com'
        })
        $('.common-notification-bar').remove()
        $('body').removeClass('epidemic-situation')
        globalAPI.refreshBodyStyleByHeader && globalAPI.refreshBodyStyleByHeader()
      }).on('keydown', function (event) {
        if ([13, 32].indexOf(event.keyCode || event.which) !== -1) {
          $(this).click()
        }
      })
    },
    popInit: function () {
      if ($('body').data('nav') !== 'Support' || globalVar.servicePopup.isShow === '0') {
        return false
      }
      var popReminderStorage = globalAPI.getLocalStorage(globalVar.brandMark + '_pop_up_reminder')
      this.popReminderStorage = popReminderStorage ? JSON.parse(popReminderStorage) : {}
      if (this.popReminderStorage[globalVar.regionId] && this.popReminderStorage[globalVar.regionId] === '1') {
        return false
      }
      if ($('.common-pop-up-shade').length === 0) {
        $('body').append(this.createPopDom())
        $('.common-pop-up').focus()
      }
      globalAPI.noScroll()
      this.popReminderClose()
    },
    createPopDom: function () {
      return '<div role="alertdialog" class="public common-pop-up-shade ani-fadeIn' + (globalVar.layoutShow && globalVar.layoutShow === '1' ? ' text-dir-rtl' : '') + '">' +
        '<div tabindex="0" aria-live="assertive" class="common-pop-up ani-slideDown">' +
        '<h1 tabindex="0" class="pop-up-title no-flip-over">' + globalVar.servicePopup.popTitle + '</h1>' +
        '<div tabindex="0" class="pop-up-container common_richtest-richtext no-flip-over">' + globalVar.servicePopup.popContent + '</div>' +
        '<i aria-label="close alert button" tabindex="0" role="button" class="pop-up-close"></i>' +
        '</div>' +
        '</div>'
    },
    popReminderClose: function () {
      var that = this
      $('.common-pop-up-shade').find('.pop-up-close').on('click', function () {
        globalAPI.allowScroll()
        that.popReminderStorage[globalVar.regionId] = '1'
        globalAPI.setLocalStorage({ key: globalVar.brandMark + '_pop_up_reminder', value: JSON.stringify(that.popReminderStorage) })
        $('.common-pop-up-shade').removeClass('ani-fadeIn').addClass('ani-fadeOut')
        $('.common-pop-up-shade').find('.common_confirm').removeClass('ani-slideDown').addClass('ani-slideUp')
        var timer = setTimeout(function () {
          $('.common-pop-up-shade').remove()
          clearTimeout(timer)
        }, 500)
      })
    }
  }
  level.init()
})()
;(function () {
  var focusTracker = {
    activeFocusDom: null,
    lastFocusDom: null
  }
  var sidebar = {
    init: function () {
      this.dealFocusTracker()
      this.backTopToggle()
      this.pageScroll()
      this.pageBackTop()
      this.userResearchToggle()
      this.contactUsToggle()
      this.contactUsLink()
    },
    dealFocusTracker: function () {
      document.addEventListener('focusin', (event) => {
        // 更新 lastDom 为当前的 activeDom
        focusTracker.lastFocusDom = focusTracker.activeFocusDom
        // 更新 activeDom 为当前获得焦点的元素
        focusTracker.activeFocusDom = event.target
      })
    },
    backTopToggle: function () {
      if ($(window).scrollTop() >= $(window).height()) {
        $('.sidebar-back-top').addClass('opacity')
      } else {
        $('.sidebar-back-top').removeClass('opacity').blur()
        if ($(focusTracker.activeFocusDom).is('.back-top-icon')) {
          $(focusTracker.lastFocusDom).focus()
        }
      }
    },
    homeGuideStop: function () {
      var that = this
      const $homeGuide = $('.home-guide')
      const scrollHeight = Math.abs($(window).scrollTop() - that.initScrollTop)
      if ($homeGuide.length) {
        // 动画未结束
        if ($homeGuide.css('opacity') != '0') {
          if (scrollHeight > 0 && scrollHeight < 400) {
            $('.home-guide').addClass('stop')
          } else if (scrollHeight >= 400) {
            $('.home-guide-wrap').addClass('remove')
          }
        }
      }
    },
    pageScroll: function () {
      var that = this
      that.initScrollTop = $(window).scrollTop()
      $(window).scroll(function () {
        that.backTopToggle()
        that.homeGuideStop()
      })
    },
    pageBackTop: function () {
      $('.back-top-icon').on('click', function () {
        if ($(this).parent().hasClass('opacity')) {
          $('html,body').scrollTop(0)
          if ($('.vep-header-pc-box').is(':visible')) {
            $('.vep-pc-logo').focus()
          }
        }
      })
    },
    userResearchToggle: function () {
      var that = this
      $('body').on('click', function () {
        that.userResearchHide()
      })
      $('.user-research-icon').on('click', function (e) {
        $('.user-research-icon').blur()
        $('.user-research-close').focus()
        e.stopPropagation()
        e.preventDefault()
        if (globalAPI.judegMobileWidth()) {
          that.userResearchShow()
        } else if ($('.user-research-shade').hasClass('show')) {
          that.userResearchHide()
        } else {
          that.userResearchShow()
        }
      }).on('keydown', function (e) {
        if ([13, 32].indexOf(e.keyCode || e.which) === -1) return
        $(this).click()
      })
      $('.user-research-box').on('click', function (e) {
        e.stopPropagation()
      })
      $('.user-research-close').on('click', function () {
        that.userResearchHide()
      }).on('keydown', function (e) {
        if ([13, 32].indexOf(e.keyCode || e.which) === -1) return
        $(this).click()
      })
    },
    userResearchShow: function () {
      clearTimeout(this.userResearchHideTimer)
      $('.contact-us-shade').removeClass('block').removeClass('show')
      $('.page-sidebar').addClass('fixed')
      $('.user-research-shade').addClass('block')
      var timer = setTimeout(function () {
        $('.user-research-shade').addClass('show')
        clearTimeout(timer)
      }, 0)
    },
    userResearchHide: function () {
      $('.user-research-shade').removeClass('show')
      var that = this
      this.userResearchHideTimer = setTimeout(function () {
        $('.user-research-shade').removeClass('block')
        $('.page-sidebar').removeClass('fixed')
        clearTimeout(that.userResearchHideTimer)
      }, 400)
    },
    contactUsToggle: function () {
      var that = this
      $('body').on('click', function () {
        that.contactUsHide()
      })
      $('.contact-us-icon').on('click', function (e) {
        e.preventDefault()
        e.stopPropagation()
        if (globalAPI.judegMobileWidth()) {
          that.contactUsShow()
        } else if ($('.contact-us-shade').hasClass('show')) {
          that.contactUsHide()
        } else {
          that.contactUsShow()
        }
      })
      $('.contact-us-box').on('click', function (e) {
        e.stopPropagation()
      })
      $('.contact-us-close').on('click', function () {
        that.contactUsHide()
      }).on('keydown', function (e) {
        if ([13, 32].indexOf(e.keyCode || e.which) === -1) return
        $(this).click()
      })
    },
    contactUsShow: function () {
      clearTimeout(this.contactUsHideTimer)
      $('.user-research-shade').removeClass('block').removeClass('show')
      $('.page-sidebar').addClass('fixed')
      $('.contact-us-shade').addClass('block')
      var that = this
      var timer = setTimeout(function () {
        $('.contact-us-shade').addClass('show').attr('aria-hidden', 'false')
        $('.sidebar-contact-us .contact-us-icon').attr('aria-expanded', 'true')
        that.contactUsPreventFocusOut = new globalAPI.PreventFocusOut({
          container: document.querySelector('.sidebar-contact-us .contact-us-box'),
          autoFocus: true,
          // focusAfterClosed: document.querySelector('.sidebar-contact-us .contact-us-icon'),
          closeOnPressEscape: true,
          openLockFocusable: true,
          closeCallback: function () {}
        })
        clearTimeout(timer)
      }, 0)
    },
    contactUsHide: function () {
      $('.contact-us-shade').removeClass('show')
      var that = this
      this.contactUsHideTimer = setTimeout(function () {
        $('.contact-us-shade').removeClass('block').attr('aria-hidden', 'true')
        $('.page-sidebar').removeClass('fixed')
        $('.sidebar-contact-us .contact-us-icon').attr('aria-expanded', 'false')
        if (that.contactUsPreventFocusOut) {
          that.contactUsPreventFocusOut.close()
          that.contactUsPreventFocusOut = null
        }
        clearTimeout(that.contactUsHideTimer)
      }, 400)
    },
    contactUsLink: function () {
      var that = this
      $('.contact-link').each(function () {
        const telReg = /^(tel:)/
        let href = $(this).data('href')
        telReg.test(href) && $(this).parent().removeClass('has-hover-link')
      })
      $('.contact-link').on('click', function () {
        let href = $(this).data('href')
        if (href === 'email') {
          if (!globalVar.isApp) {
            if ($('#header').length === 0 && $('#footer').length === 0) {
              return false
            }
          }
          that.contactUsHide()
          globalVar.isContactEmail = true
          window.VEP_EMAIL_BOX_FUNCTION && window.VEP_EMAIL_BOX_FUNCTION()
        } else {
          window.location.href = href
        }
      })
    }
  }
  sidebar.init()
})()
/**
 * vivo 埋点公共库
 *
 * @Author: sunchengrui
 * @Date: 2019-01-16
 * @example:
 *    点击埋点: Vtrack.clickStats({cfrom: 5000, is_succeed: 1})
 *    曝光埋点：可以使用IntersectionObserver方法监听，自己埋入Vtrack.clickStats方法 或者也可以如下面的例子中 插入一个元素或给元素附加data-view-stat属性，再调用 Vtrack.viewStats.observe($('#J_dataTestViewStat')[0])
 *    页面加载埋点：
 *        @1 如果只有cfrom参数，在页面dom的最后埋入， <input type='hidden' value='5000' id="J_data4TrackCfromVaule" />
 *        @2 如果参数比较多 Vtrack.loadPage({cfrom: 5000, is_succeed: 1})
 *    富文本动态埋点方法：
 *        在dom中加入对应需要的埋点属性，比如
 *          <p data-click-stat="cfrom=5001&position=1">hi track</p>
 *        在富文本中埋曝光埋点的方法，注意这里不支持监听动态插入的dom，只支持html中原有的dom
 *          <p data-view-stat="cfrom=5001&position=2">hi view</p>
 *        动态埋曝光埋点
 *          可以现在dom中插入一个元素或者给元素附加埋点属性，data-view-stat <p id="J_dataTestViewStat" data-view-stat="cfrom=5001&position=3">hi view</p>
 *          然后执行js函数，监听这个dom，Vtrack.viewStats.observe($('#J_dataTestViewStat')[0])
 */
/* global Cookies webCtx VI_PAGE_CONFIG VI_SERVICE_VERSION VI_GLOBAL_NOWTIME */
;(function () {
  var common = {
    cm: globalVar.regionId, // 国家码
    lang: globalVar.regionId, // 语言
    url: window.location.href, // 网页链接（必传），完整url，url格式需满足一定规则能唯一确定页面
    cookid: '', // 用户唯一标识，首次访问生成，只要不被清除，永久有效
    sessionid: '', // 会话id，记录一次访问
    version: 'v1.1', // 跟着版本号走，如120表示版本1.2.0
    visittime: '', // 上报时间，每条上报都需要带上
    cid: getCid().cid, // 外部来源，存cookie里，只能被url所带的cid参数更新，所有页面加载动作需要上报
    cid_eff_ts: getCid().cid_eff_ts, // 外部来源更新时间，更新逻辑同cid更新，在页面加载和提交订单随着cid一起上报，用于判定cid是否过期失效
    visittype: '', // 终端类型，根据UA解析得到，app内嵌的h5页面要传vivoapp
    gaid: getCookie('vvc_gaid') || '',
    guid: getCookie('vvc_guid') || '',
    model: getCookie('vvc_model') || '',
    app_version: getCookie('vvc_app_version') || '',
    brand: globalVar.brandMark === 'iqoo' ? '2' : '1'
  }
  var codeList = ['question', 'category1', 'category2', 'module', 'name', 'position', 'keyword', 'series', 'title', 'link', 'button_name']
  var server = {
    flyHeart: globalVar.brandMark === 'iqoo' && globalVar.regionId === 'cn' ? '//stpc.vivo.com.cn/iqoo/flyHeart' : '//' + globalVar.dataCenter + '-st-expc.vivo.com/eden/flyHeart'
  }
  var cookie_id_name = globalVar.regionId === 'in' ? 'official_site_cookie_id' : globalVar.brandMark + '_portal_cookie_id'
  // 区分宿主环境
  var ua = navigator.userAgent.toLowerCase()
  var isAndroid = /android/i.test(ua)
  var isIOS = /ipad|iphone|ipod/i.test(ua) && !window.MSStream
  var isVivoApp = /(VivoExSpace)|(iQOOExSpace)/i.test(ua)

  if (globalVar.isApp) {
    common.visittype = isVivoApp ? 'vivoapp' : 'otherapp'
  } else if (isAndroid || isIOS) {
    common.visittype = 'wap'
  } else {
    common.visittype = 'pc'
  }
  initAuthInfo()

  /**
   * 发送日志请求
   *
   * @param {Object} params
   */
  function log (params) {
    // true的时候上报
    if (globalVar.trackSwitch === 'true') {
      if (globalVar.oneTrustShow) {
        var VCMConsent = globalAPI.getCookie('VCMConsent')
        if (VCMConsent) {
          var activeGroups = JSON.parse(VCMConsent).activeGroups
          if (activeGroups && activeGroups.indexOf('3') === -1) {
            return false
          }
        }
      }
      params.random = +new Date()
      params.visittime = +new Date()
      $.ajax({
        url: server.flyHeart,
        data: params,
        type: 'POST',
        dataType: 'JSON'
      })
    }
  }

  /**
   * 序列化
   *
   * @param {Object} params
   */
  function serial (params) {
    var arr = []
    for (var p in params) {
      arr.push(p + '=' + encodeURIComponent(params[p]))
    }
    return arr.join('&')
  }

  /**
   * 浅复制对象
   *
   * @param {Object} target
   */
  function copyObj (target) {
    return $.extend({}, target)
  }

  /**
   * 从url中获取参数
   * @param  {[type]} name 参数名称
   * @return {[type]}      结果
   */
  function getParamsFromUrl (name) {
    var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i')
    var r = window.location.search.substr(1).match(reg)

    if (r != null) return decodeURIComponent(r[2])
    return null
  }

  /**
   * @method getCookie
   * @param {String} name cookie的名字
   * @return {String} cookie值
   */
  function getCookie (key) {
    var cookieValue = ''
    var search = key + '='
    if (document.cookie.length > 0) {
      var offset = document.cookie.indexOf(search)
      if (offset !== -1) {
        offset += search.length
        var end = document.cookie.indexOf(';', offset)
        if (end === -1) {
          end = document.cookie.length
        }
        cookieValue = unescape(document.cookie.substring(offset, end))
      }
    }
    return cookieValue
  }

  /**
   * @method setCooKie
   */
  function setCookie (params) {
    var content = ''
    if (params.expire) {
      // expire是小时数，合规限制cookie最多存3年
      if (params.expire > 3 * 365 * 24) {
        params.expire = 3 * 365 * 24
      }
      content += ';expires=' + new Date((new Date()).getTime() + params.expire * 60 * 60 * 1000).toGMTString()
    }
    if (params.domain) {
      content += ';domain=' + params.domain
    }
    document.cookie = params.key + '=' + escape(params.value) + content + ';path=/' + globalVar.regionId + ';secure=true'
  }

  /**
   * 获取外部来源cid
   */
  function getCid () {
    var cid = getParamsFromUrl('cid')

    if (cid) {
      setCookie({ key: 'ex_' + globalVar.brandMark + '_fe_vftcid', value: cid })
      setCookie({ key: 'ex_' + globalVar.brandMark + '_fe_vftcid_eff_ts', value: VI_GLOBAL_NOWTIME, expire: 3 * 365 * 24 })
    }

    return {
      cid: getCookie('ex_' + globalVar.brandMark + '_fe_vftcid') ? getCookie('ex_' + globalVar.brandMark + '_fe_vftcid') : '',
      cid_eff_ts: getCookie('ex_' + globalVar.brandMark + '_fe_vftcid_eff_ts') ? getCookie('ex_' + globalVar.brandMark + '_fe_vftcid_eff_ts') : ''
    }
  }

  function decode (input) {
    var REGEX_SPACE_CHARACTERS = /<%= spaceCharacters %>/g
    var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    input = String(input)
      .replace(REGEX_SPACE_CHARACTERS, '')
    var length = input.length
    if (length % 4 == 0) {
      input = input.replace(/==?$/, '')
      length = input.length
    }
    if (
      length % 4 == 1 || /[^+a-zA-Z0-9/]/.test(input)
    ) {
      console.log(
        'Invalid character: the string to be decoded is not correctly encoded.'
      )
    }
    var bitCounter = 0
    var bitStorage
    var buffer
    var output = ''
    var position = -1
    while (++position < length) {
      buffer = TABLE.indexOf(input.charAt(position))
      bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer
      // Unless this is the first of a group of 4 characters…
      if (bitCounter++ % 4) {
        // …convert the first 8 bits to a single ASCII character.
        output += String.fromCharCode(
          0xFF & bitStorage >> (-2 * bitCounter & 6)
        )
      }
    }
    return output
  }

  function initAuthInfo () {
    if (getCookie(cookie_id_name) === '') {
      const domain = globalVar.brandMark == 'jovi' ? 'jovimobile' : globalVar.brandMark
      setCookie({ key: cookie_id_name, value: generateNewGuid(), expire: 3 * 365 * 24, domain: domain + '.com' })
    }
    if (getCookie(globalVar.brandMark + '_portal_sessionid') === '') {
      setCookie({ key: globalVar.brandMark + '_portal_sessionid', value: generateNewGuid() })
    }
    common.cookid = getCookie(cookie_id_name)
    common.sessionid = getCookie(globalVar.brandMark + '_portal_sessionid')
    common.openid = getCookie('vivo_account_cookie_iqoo_openid') === '-1' ? '' : decode(getCookie('vivo_account_cookie_iqoo_openid'))
  }

  /**
   * 生成GUID
   *
   * @returns {string}
   */
  function generateNewGuid () {
    var guid = ''
    for (var i = 1; i <= 32; i++) {
      var n = Math.floor(Math.random() * 16.0).toString(16)
      guid += n
      if ((i == 8) || (i == 12) || (i == 16) || (i == 20)) { guid += '-' }
    }
    return guid
  }

  var Vtrack = {
    paramsDb: {},
    clickStats: function (customParams, userParams) {
      var pobj = {}
      var mergeobj = {}
      var userobj = {}

      if (typeof customParams === 'string' || typeof customParams === 'number') {
        customParams = String(customParams)
        if (typeof this.paramsDb === 'object') {
          pobj = copyObj(this.paramsDb[customParams])
        }
        if (typeof userParams === 'object') {
          userobj = copyObj(userParams)
        }
        pobj = $.extend({}, pobj, userobj)
      } else if (typeof customParams === 'object') {
        pobj = copyObj(customParams)
      }

      for (var p in pobj) {
        if (!(p in common)) {
          mergeobj[p] = pobj[p]
        }
      }

      log($.extend({}, common, mergeobj))
    },
    loadPage: function (customParams, userParams) {
      var that = this
      var timer = setTimeout(function () {
        if (typeof customParams === 'object') {
          customParams.is_done = 1
          customParams.during = typeof performance === 'undefined' ? 0 : performance.timing.loadEventEnd - performance.timing.navigationStart
          customParams.requestTiming = typeof performance === 'undefined' ? 0 : performance.timing.responseEnd - performance.timing.requestStart
          customParams.compileDomTiming = typeof performance === 'undefined' ? 0 : performance.timing.domComplete - performance.timing.domInteractive
          customParams.hangTiming = typeof performance === 'undefined' ? 0 : performance.timing.responseStart - performance.timing.navigationStart
          customParams.domReadyTiming = typeof performance === 'undefined' ? 0 : performance.timing.domContentLoadedEventEnd - performance.timing.navigationStart
          customParams.tti = typeof performance === 'undefined' ? 0 : performance.timing.domInteractive - performance.timing.navigationStart
          customParams.dnslookup = typeof performance === 'undefined' ? 0 : performance.timing.domainLookupEnd - performance.timing.domainLookupStart
          customParams.tcp = typeof performance === 'undefined' ? 0 : performance.timing.connectEnd - performance.timing.connectStart
        }
        that.clickStats(customParams, userParams)
        clearTimeout(timer)
      }, 500)
    }
  }

  Vtrack.viewStats = new IntersectionObserver(function (changes) {
    for (var i = 0; i < changes.length; i++) {
      if (changes[i].intersectionRatio > 0) {
        var $dom = $(changes[i].target)

        if ($dom.data('view-stat')) {
          var str = $dom.data('view-stat').split('=')
          for (var j = 0; j < str.length; j++) {
            var flag = codeList.every(function (v) {
              return str[j].indexOf(v) < 0
            })
            if (str[j].indexOf('&') > 0 && flag) {
              str[j] = encodeURIComponent(str[j])
            } else if (str[j].indexOf('category2') > 0 && str[j].split('&').length >= 3) {
              str[j] = str[j].replace('category2', '')
              str[j] = str[j].substring(0, str[j].length - 1)
              str[j] = encodeURIComponent(str[j])
              str[j] = str[j] + '&category2'
            }
          }
          str = str.join('=')
          var obj = par2Json(str)
          Vtrack.clickStats(obj)
        }
      }
    }
  })

  $(window).on('load', function () {
    // 页面加载自动打点
    var $data4TrackCfrom = $('#J_data4TrackCfromVaule')

    if ($data4TrackCfrom.length > 0) {
      Vtrack.loadPage({
        cfrom: $('#J_data4TrackCfromVaule').val().trim() || ''
      })
    }
  })

  $(function () {
    $(document).on('click', '[data-click-stat]', function () {
      if ($(this).data('click-stat')) {
        var str = $(this).data('click-stat').split('=')
        for (var j = 0; j < str.length; j++) {
          var flag = codeList.every(function (v) {
            return str[j].indexOf(v) < 0
          })
          if (str[j].indexOf('&') > 0 && flag) {
            str[j] = encodeURIComponent(str[j])
          } else if (str[j].indexOf('category2') > 0 && str[j].split('&').length >= 3) {
            str[j] = str[j].replace('category2', '')
            str[j] = str[j].substring(0, str[j].length - 1)
            str[j] = encodeURIComponent(str[j])
            str[j] = str[j] + '&category2'
          }
        }
        str = str.join('=')
        var obj = par2Json(str)
        Vtrack.clickStats(obj)
      }
    })

    $('[data-view-stat]').each(function () {
      Vtrack.viewStats.observe($(this)[0])
    })
  })

  /**
   * query字符串转Json格式数据
   */
  function par2Json (string, overwrite) {
    var obj = {}
    var pairs = string.split('&')
    var d = decodeURIComponent
    var name
    var value
    $.each(pairs, function (i, pair) {
      pair = pair.split('=')
      name = d(pair[0])
      value = d(pair[1])
      obj[name] = overwrite || !obj[name] ? value : [].concat(obj[name]).concat(value)
    })
    return obj
  }

  window.Vtrack = Vtrack
})()

// 文档加载就绪
var enterTime = null
$(document).ready(function () {
  enterTime = new Date().getTime()

  globalAPI.gaPushFun({
    'loginStatus': globalVar.isUserLogin === 'true' ? 'logged in' : 'logged out',
    'userId': globalVar.userOpenId,
    'siteCode': globalVar.regionId,
    'page_category': $('body').data('category'),
    'web_wap': globalAPI.judegMobileWidth() ? 'WAP' : 'PC'
  })

  var scrollRestorationTimer = setTimeout(function () {
    if ('scrollRestoration' in history) {
      history.scrollRestoration = 'auto'
    }
    clearTimeout(scrollRestorationTimer)
  }, 1000)

  if ($('.suspension-box').length > 0) {
    $('.suspension-box').show()
  }

  /*var appWindowPage = $('body').data('appPage')
  var pageFlag = appWindowPage !== 'additional-privacy' && appWindowPage !== 'none-cookie'
  if (globalVar.isComplianceStates && globalVar.isApp && window.VivoWebSite && globalVar.isEu && pageFlag) {
    globalAPI.appCookiePolicyWindow()
  }*/

  // 处理富文本
  globalAPI.handleRichText('.common_richtest-richtext')

  var cookiesTimer = setTimeout(function () {
    document.documentElement.classList.remove('cookies')
    clearTimeout(cookiesTimer)
  }, 0)
})

globalAPI.arabicToEnglish = function (num) {
  const units = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];
  const teens = ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];
  const tens = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];
  const thousands = ['', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sextillion', 'septillion', 'octillion', 'nonillion', 'decillion'];

  if (num === 0) {
      return 'zero';
  }

  let numStr = num.toString();
  let result = '';

  // 将数字按照每三位一组进行划分，从右往左
  let groups = [];
  while (numStr.length > 0) {
      groups.push(numStr.slice(-3));
      numStr = numStr.slice(0, -3);
  }

  for (let i = groups.length - 1; i >= 0; i--) {
      let group = groups[i];
      let groupNum = parseInt(group);

      if (groupNum === 0) {
          continue;
      }

      let groupResult = '';

      if (group.length === 3) {
          groupResult += units[parseInt(group[0])] +'hundred ';
          group = group.slice(1);
      }

      if (group.length === 2) {
          if (parseInt(group) >= 10 && parseInt(group) <= 19) {
              groupResult += teens[parseInt(group) - 10];
          } else {
              groupResult += tens[parseInt(group[0])];
              if (parseInt(group[1]) > 0) {
                  groupResult += '-' + units[parseInt(group[1])];
              }
          }
      } else if (group.length === 1) {
          groupResult += units[parseInt(group[0])];
      }

      // 添加对应的数量级（千、百万、十亿等）
      if (i > 0) {
          groupResult +='' + thousands[i];
      }

      result += groupResult +'';
  }

  return result.trim();
}

/**
 * 离线缓存
 * */
;(function () {
  // 添加service worker
  if ('serviceWorker' in navigator) {
    if (globalVar.isSwCacheEnable) {
      window.addEventListener('load', function () {
        navigator.serviceWorker.register('https://' + location.host + '/' + globalVar.regionId + '/sw.js')
          .then(function (registration) {
            // 注册成功
            // console.log('ServiceWorker registration successful with scope: ', registration.scope);
          })
          .catch(function (err) {
            // 注册失败:
            // console.log('ServiceWorker registration failed: ', err);
          })
      })
    } else {
      navigator.serviceWorker.getRegistrations().then(function (registrations) {
        for (var i = 0; i < registrations.length; i++) {
          registrations[i].unregister()
        }
      })
    }
  }
})()

/**
 * 进入页面时间enterTime
 * 离开页面时间leaveTime
 * 页面停留时间duration = leaveTime - enterTime
 * 页面名称pageName
 * 区分FAQ列表页和服务中心dataTrackingPage
 * */
window.onbeforeunload = function () {
  var leaveTime = new Date().getTime()
  var duration = leaveTime - enterTime
  var pageName = document.body.getAttribute('data-nav')
  var bodyClass = document.getElementsByTagName('body')[0].className
  var dataTrackingPage = document.body.getAttribute('data-tracking-page')
  var reminder = globalAPI.getLocalStorage(globalVar.brandMark + '_pop_up_reminder')
  reminder = reminder ? JSON.parse(reminder) : {}

  if ((pageName && pageName === 'Support') && globalVar.servicePopup.isShow === '1' && (!reminder[globalVar.regionId] || reminder[globalVar.regionId] !== '1')) {
    if ('scrollRestoration' in history) {
      history.scrollRestoration = 'manual'
    }
  }

  switch (pageName) {
    case 'Home':
      pageName = '首页'
      break
    case 'Products':
      if (bodyClass === 'product-home') {
        pageName = '产品首页'
      } else {
        pageName = ''
      }
      break
    case 'Retailers':
      pageName = '专卖店'
      break
    case 'Support':
      if (dataTrackingPage === 'support detail') {
        pageName = 'FAQ列表页'
      } else if (dataTrackingPage === 'service center') {
        pageName = '服务中心'
      } else {
        pageName = '服务首页'
      }
      break
    case 'Funtouch-OS':
      pageName = 'Funtouch os'
      break
    case 'About-vivo':
      pageName = 'about ' + globalVar.brandMark + '首页'
      break
    default:
      pageName = ''
      break
  }

  if (pageName) {
    Vtrack.clickStats({
      cfrom: 1013,
      duration: duration,
      page: pageName
    })
  }
}
